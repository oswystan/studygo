// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package imc_lib is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	CmdLogin
	CmdModifyInfo
	ImcCmd
*/
package imc_lib

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CmdLogin struct {
	UserName         *string `protobuf:"bytes,1,req,name=UserName" json:"UserName,omitempty"`
	Passwd           *string `protobuf:"bytes,2,req,name=Passwd" json:"Passwd,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CmdLogin) Reset()                    { *m = CmdLogin{} }
func (m *CmdLogin) String() string            { return proto.CompactTextString(m) }
func (*CmdLogin) ProtoMessage()               {}
func (*CmdLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CmdLogin) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *CmdLogin) GetPasswd() string {
	if m != nil && m.Passwd != nil {
		return *m.Passwd
	}
	return ""
}

type CmdModifyInfo struct {
	UserName         *string `protobuf:"bytes,1,req,name=UserName" json:"UserName,omitempty"`
	NewPasswd        *string `protobuf:"bytes,2,req,name=NewPasswd" json:"NewPasswd,omitempty"`
	NickName         *string `protobuf:"bytes,3,req,name=NickName" json:"NickName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CmdModifyInfo) Reset()                    { *m = CmdModifyInfo{} }
func (m *CmdModifyInfo) String() string            { return proto.CompactTextString(m) }
func (*CmdModifyInfo) ProtoMessage()               {}
func (*CmdModifyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CmdModifyInfo) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *CmdModifyInfo) GetNewPasswd() string {
	if m != nil && m.NewPasswd != nil {
		return *m.NewPasswd
	}
	return ""
}

func (m *CmdModifyInfo) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

type ImcCmd struct {
	CmdType          *int32         `protobuf:"varint,1,req,name=CmdType" json:"CmdType,omitempty"`
	Login            *CmdLogin      `protobuf:"bytes,2,opt,name=Login" json:"Login,omitempty"`
	ModifyInfo       *CmdModifyInfo `protobuf:"bytes,3,opt,name=ModifyInfo" json:"ModifyInfo,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ImcCmd) Reset()                    { *m = ImcCmd{} }
func (m *ImcCmd) String() string            { return proto.CompactTextString(m) }
func (*ImcCmd) ProtoMessage()               {}
func (*ImcCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ImcCmd) GetCmdType() int32 {
	if m != nil && m.CmdType != nil {
		return *m.CmdType
	}
	return 0
}

func (m *ImcCmd) GetLogin() *CmdLogin {
	if m != nil {
		return m.Login
	}
	return nil
}

func (m *ImcCmd) GetModifyInfo() *CmdModifyInfo {
	if m != nil {
		return m.ModifyInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*CmdLogin)(nil), "imc_lib.CmdLogin")
	proto.RegisterType((*CmdModifyInfo)(nil), "imc_lib.CmdModifyInfo")
	proto.RegisterType((*ImcCmd)(nil), "imc_lib.ImcCmd")
}

var fileDescriptor0 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcf, 0xcc, 0x4d, 0x8e,
	0xcf, 0xc9, 0x4c, 0x52, 0xd2, 0xe1, 0xe2, 0x70, 0xce, 0x4d, 0xf1, 0xc9, 0x4f, 0xcf, 0xcc, 0x13,
	0x12, 0xe0, 0xe2, 0x08, 0x2d, 0x4e, 0x2d, 0xf2, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd2,
	0xe0, 0x14, 0xe2, 0xe3, 0x62, 0x0b, 0x48, 0x2c, 0x2e, 0x2e, 0x4f, 0x91, 0x60, 0x02, 0xf1, 0x95,
	0xdc, 0xb8, 0x78, 0x81, 0xaa, 0x7d, 0xf3, 0x53, 0x32, 0xd3, 0x2a, 0x3d, 0xf3, 0xd2, 0xf2, 0xb1,
	0x68, 0x11, 0xe4, 0xe2, 0xf4, 0x4b, 0x2d, 0x47, 0xd6, 0x05, 0x52, 0xe4, 0x97, 0x99, 0x9c, 0x0d,
	0x56, 0xc4, 0x0c, 0x36, 0x27, 0x9d, 0x8b, 0xcd, 0x33, 0x37, 0x19, 0x68, 0x94, 0x10, 0x3f, 0x17,
	0x3b, 0x90, 0x0a, 0xa9, 0x2c, 0x80, 0xe8, 0x67, 0x15, 0x52, 0xe0, 0x62, 0x05, 0xbb, 0x06, 0xa8,
	0x97, 0x51, 0x83, 0xdb, 0x48, 0x50, 0x0f, 0xea, 0x52, 0x3d, 0xb8, 0x33, 0xb5, 0xb8, 0xb8, 0x10,
	0x2e, 0x00, 0x1a, 0x08, 0x52, 0x26, 0x86, 0xac, 0x0c, 0x21, 0x0b, 0x08, 0x00, 0x00, 0xff, 0xff,
	0xb9, 0xad, 0x8d, 0xb4, 0xf8, 0x00, 0x00, 0x00,
}
